#!/usr/bin/env ruby
#MIT License
#Copyright (c) 2018 phR0ze
#
#Permission is hereby granted, free of charge, to any person obtaining a copy
#of this software and associated documentation files (the "Software"), to deal
#in the Software without restriction, including without limitation the rights
#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#copies of the Software, and to permit persons to whom the Software is
#furnished to do so, subject to the following conditions:
#
#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.
#
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#SOFTWARE.

begin
  if !File.expand_path(__FILE__).include?("ruby-nub/bin")
    require 'nub'
  else
    require_relative '../lib/nub/net'
    require_relative '../lib/nub/user'
    require_relative '../lib/nub/commander'
  end
rescue Exception => e
  puts("Error: missing package '#{e.message.split(' ').last.sub('/', '-')}'")
  !puts("Error: install missing packages with 'bundle install --system") and exit
end
Log.die("Must be root to execute") if not User.root?

class NSCtl
  # List out the namespaes
  def list
    `ip netns list`.split("\n").sort.each{|x|
      ns = x[/(.*?) /, 1]
      host, guest, _ = Net.namespace_details(ns)
      puts(Net.port_open?(host.ip, 5938))
      puts(Net.port_open?(guest.ip, 5938))
      puts("#{ns.colorize(:cyan)}: veths=[#{host.name}:#{host.ip}, #{guest.name}:#{guest.ip}]")
    }
  end
end

app = 'nsctl'
version = '0.0.1'
examples = "List Namespaces: sudo ./#{app} list\n".colorize(:green)
examples += "Create Namespace: sudo ./#{app} create tv1\n".colorize(:green)
examples += "Destroy Namespace: sudo ./#{app} destroy tv1\n".colorize(:green)

cmdr = Commander.new(app:app, version:version, examples:examples)
cmdr.add('list', 'List namespaces')
cmdr.add('create', 'Create namespace', nodes:[
  Option.new(nil, "Namespace name to create", required:true),
], examples: "Create Namespace: sudo ./#{app} create tv1\n".colorize(:green))
cmdr.add('exec', 'Execute in namespace', nodes:[
  Option.new(nil, "Namespace name to use", required:true),
  Option.new(nil, "Command to execute", required:true)
], examples: "Execute: sudo ./#{app} exec tv1 'ping -c 1 192.168.100.1'\n".colorize(:green))
cmdr.add('destroy', 'Destroy namespace', nodes:[
  Option.new(nil, "Namespace name to destroy", required:true),
], examples: "Destroy Namespace: sudo ./#{app} destroy tv1\n".colorize(:green))
cmdr.parse!

nsctl = NSCtl.new
if cmdr[:list]
  nsctl.list
elsif cmdr[:create]
  ns = cmdr[:create][:create0]
  Net.create_namespace(ns)
  nsctl.list
elsif cmdr[:exec]
  ns = cmdr[:exec][:exec0]
  cmd = cmdr[:exec][:exec1]
  puts(Net.namespace_exec(ns, cmd))
elsif cmdr[:destroy]
  Net.delete_namespace(cmdr[:destroy][:destroy0])
end

# vim: ft=ruby:ts=2:sw=2:sts=2
